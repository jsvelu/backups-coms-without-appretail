{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import resolveMethod from './resolveMethod';\nimport semver from 'semver';\n\nconst LODASH_DEFAULT_VERSION = '4.0.0';\n\nexport default ({\n    types: t\n}) => {\n    let importMethod,\n        lodashObjects,\n        lodashVersion,\n        selectedMethods,\n        specified;\n\n    importMethod = (methodName, file) => {\n        if (!selectedMethods[methodName]) {\n            selectedMethods[methodName] = file.addImport(resolveMethod(methodName, lodashVersion), 'default', methodName);\n        }\n\n        return selectedMethods[methodName];\n    };\n\n    return {\n        visitor: {\n            CallExpression (path) {\n                let file,\n                    name,\n                    node;\n\n                ({node} = path);\n                ({name} = node.callee);\n                ({file} = path.hub);\n\n                if (!t.isIdentifier(node.callee)) {\n                    return;\n                }\n\n                if (specified[name]) {\n                    node.callee = importMethod(specified[name], file);\n                }\n\n                if (lodashObjects[name]) {\n                    node.callee = importMethod('chain', file);\n                }\n            },\n            ImportDeclaration (path) {\n                let node,\n                    value;\n\n                ({node} = path);\n                ({value} = node.source);\n\n                if (value !== 'lodash') {\n                    return;\n                }\n\n                node.specifiers.forEach((specifier) => {\n                    if (t.isImportSpecifier(specifier)) {\n                        specified[specifier.local.name] = specifier.imported.name;\n                    } else {\n                        lodashObjects[specifier.local.name] = true;\n                    }\n                });\n\n                path.remove();\n            },\n            MemberExpression (path) {\n                let file,\n                    node;\n\n                ({node} = path);\n                ({file} = path.hub);\n\n                if (!lodashObjects[node.object.name]) {\n                    return;\n                }\n\n                path.replaceWith(importMethod(node.property.name, file));\n            },\n            Program: {\n                enter (path, state) {\n                    lodashObjects = {};\n                    specified = {};\n                    selectedMethods = {};\n                    lodashVersion = state.opts.lodashVersion || LODASH_DEFAULT_VERSION;\n\n                    if (semver.lt(lodashVersion, '3.0.0')) {\n                        throw new Error('lodash prior to version 3 is unsupported.');\n                    }\n                }\n            }\n        }\n    };\n};\n"],"sourceRoot":"/source/"}