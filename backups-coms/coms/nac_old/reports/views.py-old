

import collections
from datetime import datetime
from decimal import Decimal
import functools

from django.conf import settings
from django.utils import timezone
from django.views.generic.base import TemplateView
from django.views.generic.base import View
from rest_framework.generics import get_object_or_404
from rules.contrib.views import PermissionRequiredMixin

from caravans.models import SeriesSKU
from dealerships.models import Dealership
from newage.utils import ExportCSVMixin
from orders.models import Order
from orders.models import OrderSKU
from orders.models import Show

from .rules import get_user_reports_dealerships

SECONDS_PER_DAY = 24*60*60
SELECTIONS_DAYS_UNRESOLVED = 7
SALESREPORT_DEALERSHIP_ID_ALL = -1

class ReportsIndexView(PermissionRequiredMixin, TemplateView):
    template_name = 'reports/index.html'
    permission_required = 'reports.view_reports_page'

    def get_context_data(self, **kwargs):
        data = super(ReportsIndexView, self).get_context_data(**kwargs)
        data['shows'] = [
            {
                'id': show.id,
                'name': show.name,
            }
            for show in Show.objects.all()
        ]

        user = self.request.user

        dealerships = get_user_reports_dealerships(user)

        data['dealerships'] = [
            {
                'id': dealership.id,
                'name': dealership.name,
            }
            for dealership in dealerships
        ]

        if user.has_perm('reports.view_sales_breakdown_all'):
            data['dealerships'].append({'id': SALESREPORT_DEALERSHIP_ID_ALL, 'name': 'All Dealerships'})

        data['can_export_invoice'] = user.has_perm('reports.view_invoice_report')
        data['can_export_runsheet'] = user.has_perm('reports.export_runsheet')
        data['can_export_sales_any'] = user.has_perm('reports.view_sales_breakdown_all')
        data['can_export_sales_user'] = user.has_perm('reports.view_sales_breakdown_own')
        data['can_export_colorsheet'] = user.has_perm('reports.export_colorsheet')
        return data


class InvoiceView(ExportCSVMixin, PermissionRequiredMixin, View):
    permission_required = 'reports.view_invoice_report'

    def get_orders(self):
        date_from = datetime.strptime(self.date_from, settings.FORMAT_DATE_DATEPICKER_DASH_FMT).date()
        date_to = datetime.strptime(self.date_to, settings.FORMAT_DATE_DATEPICKER_DASH_FMT).date()

        date_to = datetime.combine(date_to, datetime.max.time())  # get all orders of that same day

        if self.type == 'production_date':
            orders = (Order.objects
                .filter(
                build__build_date__gte=date_from,
                build__build_date__lte=date_to,
                order_cancelled__isnull=True,
            )
                .order_by('id')
                .select_related(
                'customer__physical_address__suburb__post_code__state',
                'orderseries',
                'orderseries__series',
                )
            )
        else:
            orders = (Order.objects
                .filter(
                order_submitted__gte=date_from,
                order_submitted__lte=date_to,
                order_cancelled__isnull=True,
            )
                .order_by('id')
                .select_related(
                'customer__physical_address__suburb__post_code__state',
                'orderseries',
                'orderseries__series',
                )
            )
        orders = [order for order in orders if not order.is_quote()]
        return orders

    def get_order_items(self, order):
        def get_wholesale_price(order_sku):
            # When order is finalised, use the wholesale price recorded against the OrderSku object, otherwise the actual sku wholesale price
            if order.get_finalization_status() == Order.STATUS_APPROVED:
                return order_sku.wholesale_price or 0
            return order_sku.sku.wholesale_price or 0

        # Special features
        def get_special_feature_display(special_feature):
            result = special_feature.customer_description or '[No Customer Description]'
            if special_feature.factory_description:
                result += ', ' + special_feature.factory_description
            return result

        # Base price
        items = [
            {
                'type': 'Standard',
                'name': 'Base price',
                'wholesale_price': order.orderseries.wholesale_price if hasattr(order, 'orderseries') and order.orderseries.wholesale_price else 0,
                'retail_price': order.orderseries.retail_price if hasattr(order, 'orderseries') and order.orderseries.retail_price else 0,
            }
        ]
        # Options
        items += [
            {
                'type': 'Option',
                'name': osku.sku.public_description or osku.sku.description,
                'wholesale_price': get_wholesale_price(osku),
                'retail_price' : osku.retail_price or 0,
            } for osku in order.ordersku_set.filter(base_availability_type=SeriesSKU.AVAILABILITY_OPTION)
        ]
        # Special feature
        items += [
            {
                'type': 'Special Feature',
                'name': get_special_feature_display(special),
                'wholesale_price': special.wholesale_price or 0,
                'retail_price': special.retail_price or 0,
            } for special in order.specialfeature_set.all()
        ]

        return items

    def get_headers(self, table=None):
        headers = [
            'Option / Special Feature',
            'SKU Name',
            'Chassis no / Order no',
            'Series',
            'Dealership',
            'Customer Name',
            'Whole Sale Price',
            'Retail Price',
            'Postcode',
            'Show',
            'Sales Person',
            'Production Date',
            'Order Placed Date',
        ]
        return headers

    def get_order_rows(self, order):
        items = self.get_order_items(order)

        order_rows = [
            [item['type'],
             item['name'],
             order.chassis if order.chassis else 'Order #' + str(order.id),
             order.orderseries.series.code if hasattr(order, 'orderseries') else '',
             order.dealership if order.dealership else '',
             order.customer.first_name + ' ' + order.customer.last_name if order.customer else '(Stock)',
             item['wholesale_price'],
             item['retail_price'],
             order.customer.physical_address.suburb.post_code.number if order.customer and order.customer.physical_address else '',
             order.show.name if order.show else '',
             order.dealer_sales_rep.get_full_name(),
             self.convert_date_time_to_local(order.build.build_date) if order.build else '',
             self.convert_date_time_to_local(order.order_submitted) if order.order_submitted else '',
             ]
            for item in items
        ]

        return order_rows

    def get_rows(self, table=None, id=None):
        orders = self.get_orders()

        rows = []
        for order in orders:
            rows += self.get_order_rows(order)

        return rows

    def get_file_name(self):
        return 'Invoice for '

    def get_complete_file_name(self):
        return '{0}{1} {2} - {3}'.format(self.get_file_name(), self.type, self.date_from, self.date_to)

    def get(self, request, * args, **kwargs):
        self.type = kwargs['type']
        self.date_from = kwargs['date_from']
        self.date_to = kwargs['date_to']
        return self.write_csv()


def getattr_nested(obj, *args, **kwargs):
    """
    Checks that obj.arg1 is defined and not None
    Then check obj.arg1.arg2 etc, until all args have been checked
    Returns True if all args are defined and not None

    >>> # A base object() has no __dict__ so we need to create a dummy class for testing
    >>> class EmptyObject(object):
    ...     pass
    >>> x = EmptyObject()
    >>> setattr(x, 'a', EmptyObject())
    >>> setattr(x.a, 'b', EmptyObject())
    >>> setattr(x.a.b, 'c', None)
    >>> setattr(x.a.b, 'd', 4)
    >>> setattr(x.a.b, 'e', {})
    >>> setattr(x.a.b, 'f', EmptyObject())
    >>> setattr(x.a.b, 'g', False)
    >>> check_object_chain(x, 'a')
    True
    >>> check_object_chain(x, 'aaa')
    False
    >>> check_object_chain(x, 'a', 'b')
    True
    >>> check_object_chain(x, 'a', 'bbb')
    False
    >>> check_object_chain(x, 'a', 'b', 'c')
    False
    >>> check_object_chain(x, 'a', 'b', 'ccc')
    False
    >>> check_object_chain(x, 'a', 'b', 'd')
    True
    >>> check_object_chain(x, 'a', 'b', 'e')
    True
    >>> check_object_chain(x, 'a', 'b', 'f')
    True
    >>> check_object_chain(x, 'a', 'b', 'g')
    True
    """
    default = kwargs.get('default')

    try:
        value = functools.reduce(getattr, args, obj)
        return value
    except AttributeError:
        return default



def calculate_margin_without_gst(order):

    price_affecting_order_skus = order.ordersku_set.filter(base_availability_type__in=(SeriesSKU.AVAILABILITY_OPTION, SeriesSKU.AVAILABILITY_UPGRADE))

    retail_total = (
        (order.orderseries.retail_price if hasattr(order, 'orderseries') and order.orderseries.retail_price else 0) +
        (order.price_adjustment_retail or 0) +
        (order.after_sales_retail or 0) +
        sum(osku.sku.retail_price or 0 for osku in price_affecting_order_skus) +
        sum(specialfeature.retail_price or 0 for specialfeature in order.specialfeature_set.all())
    )
    wholesale_total = (
        (order.orderseries.wholesale_price if hasattr(order, 'orderseries') and order.orderseries.wholesale_price else 0) +
        (order.price_adjustment_wholesale or 0) +
        (order.after_sales_wholesale or 0) +
        sum(osku.sku.wholesale_price or 0 for osku in price_affecting_order_skus) +
        sum(specialfeature.wholesale_price or 0 for specialfeature in order.specialfeature_set.all()) +
        order.dealer_load
    )

    wholesale_total += order.trade_in_write_back

    return round((retail_total - wholesale_total) / Decimal(1.1), 2)

def get_sales_date(export_csv_mixin, order):
    """
    Calls the datetime conversion method from ExportCSVMixin to turn order's relevant date into desired format
    """
    if order.is_order_converted:
        if order.order_converted:
            return export_csv_mixin.convert_date_time_to_local(order.order_converted)
        else:
            return ''
    elif order.order_submitted:
        return export_csv_mixin.convert_date_time_to_local(order.order_submitted)
    else:
        return ''


class SalesView(ExportCSVMixin, PermissionRequiredMixin, View):
    permission_required = 'reports.view_sales_breakdown'

    def get_rows(self, table=None, id=None):

        date_from = datetime.strptime(self.date_from, settings.FORMAT_DATE_DATEPICKER_DASH_FMT).date()
        date_to = datetime.strptime(self.date_to, settings.FORMAT_DATE_DATEPICKER_DASH_FMT).date()
        date_to = datetime.combine(date_to, datetime.max.time())  # get all orders of that same day

        orders = (Order.objects
            .filter(
                order_submitted__gte=date_from,
                order_submitted__lte=date_to,
                order_cancelled__isnull=True,
            )
            .order_by('id')
            .select_related(
                'customer__physical_address__suburb__post_code__state',
                'orderseries',
                'orderseries__series',
                'dealership',
            )
        )

        if self.dealership_id != SALESREPORT_DEALERSHIP_ID_ALL:
            orders = orders.filter(dealership_id=self.dealership_id)

        orders = [order for order in orders if not order.is_quote()]

        rows = [
            [
                order.dealership,
                get_sales_date(self, order),
                order.customer.first_name if order.customer else 'STOCK',
                order.customer.last_name if order.customer else '',
                getattr_nested(order, 'customer', 'physical_address', 'suburb', 'name', default=''),
                getattr_nested(order, 'customer', 'physical_address', 'suburb', 'post_code', 'state', 'code', default=''),
                getattr_nested(order, 'customer', 'physical_address', 'suburb', 'post_code', 'number', default=''),
                order.customer.email if order.customer else '',
                order.orderseries.series.code if hasattr(order, 'orderseries') else '',
                order.id,
                order.chassis,
                order.dealer_sales_rep.get_full_name(),
            ]
            for order in orders
            ]
        return rows


    def get_headers(self, table=None):
        headers = [
            'Dealership',
            'Order Placed Date',
            'First Name',
            'Last Name',
            'Suburb',
            'State',
            'Post Code',
            'E-mail Address',
            'Series Code',
            'Order #',
            'Chassis #',
            'Sales Rep Name',
        ]
        return headers

    def get_file_name(self):
        return 'Sales between '

    def get_complete_file_name(self):
        return '{0} {1} - {2}'.format(self.get_file_name(), self.date_from, self.date_to)

    def get(self, request, * args, **kwargs):
        self.dealership_id = None
        self.date_from = kwargs['date_from']
        self.date_to = kwargs['date_to']
        dealership_id = kwargs['dealership_id']

        if get_user_reports_dealerships(request.user, dealership_id):
            self.dealership_id = int(dealership_id)

        return self.write_csv()


class RunsheetView(ExportCSVMixin, PermissionRequiredMixin, View):
    permission_required = 'reports.export_runsheet'

    def get_headers(self, table=None):
        headers = [
            'Sequence. No',
            'Date',
            'First Name',
            'Last Name',
            'Suburb',
            'State',
            'Post Code',
            'E-mail Address',
            'Series Code',
            'Chassis #',
            'Order no',
            'Trade-in',
            'Deposit',
            'Retained Gross',
            'Sales Rep Name',
            'Desired Delivery Month',
            'Comments',
            'After Market',
            'Subject To',
        ]
        return headers

    def get_rows(self, table=None, id=None):

        orders = (Order.objects
            .filter(
            show_id=self.show_id,
            order_cancelled__isnull=True,
        )
            .order_by('id')
            .select_related(
            'customer__physical_address__suburb__post_code__state',
            'orderseries',
            'orderseries__series',
        )
        )

        orders = [order for order in orders if not order.is_quote()]

        rows = [
            [
                row + 1,
                get_sales_date(self, order),
                order.customer.first_name if order.customer else 'STOCK',
                order.customer.last_name if order.customer else '',
                getattr_nested(order, 'customer', 'physical_address', 'suburb', 'name', default=''),
                getattr_nested(order, 'customer', 'physical_address', 'suburb', 'post_code', 'state', 'code', default=''),
                getattr_nested(order, 'customer', 'physical_address', 'suburb', 'post_code', 'number', default=''),
                order.customer.email if order.customer else '',
                order.orderseries.series.code if hasattr(order, 'orderseries') else '',
                order.chassis,
                order.id,
                order.trade_in_comment,
                order.deposit_paid_amount,
                calculate_margin_without_gst(order),
                order.dealer_sales_rep.get_full_name(),
                order.delivery_date,
                order.price_comment,
                order.aftermarketnote.note if hasattr(order, 'aftermarketnote') and order.aftermarketnote else '',
                order.orderconditions.details if hasattr(order, 'orderconditions') and order.orderconditions else '',
            ]
            for row, order in enumerate(orders)
            ]
        return rows

    def get_file_name(self):
        return 'Runsheet for '

    def get_complete_file_name(self):
        return '{0}{1} - {2}'.format(self.get_file_name(), self.show.name,
                                     timezone.localtime(timezone.now()).strftime(settings.FORMAT_DATE_ONEWORD))

    def get(self, request, show_id=None):
        self.show_id = show_id
        self.show = get_object_or_404(Show, id=show_id)
        return self.write_csv()


# class ColorSelectionSheetView(ExportCSVMixin, PermissionRequiredMixin, View):
#     permission_required = 'reports.export_colorsheet'

#     def get_headers(self, table=None):
#         print('get_headers')
#         headers = [
#             'Date',
#             'Order',
#             'Dealership',
#             'Customer',
#             'Day since order placed',
#             'Number of selections still to be made',
#         ]

#         print(headers)
#         return headers

#     def get_rows(self, table=None):
#         print('get_rows')
#         orderskus = OrderSKU \
#         .objects \
#         .prefetch_related('sku','order','order__dealership','order__customer') \
#         .
#         print('orderskus')
#         # print(orderskus)

#         for i in range(10):
#             print(orderskus[i])

#         ordercount = collections.defaultdict(int)
#         print('ordercount')
#         print(ordercount)

#         for osku in orderskus:
#             print('osku')
#             print(osku)
#             if osku.sku.public_description.lower().find('to be selected'):
#                 ordercount[osku.order] += 1

#         rows = []
#         for order in ordercount:
#             print(order)
#             if not order.order_submitted:
#                 continue

#             day_elapsed = int((timezone.now() - order.order_submitted).total_seconds()/SECONDS_PER_DAY)
#             if day_elapsed < SELECTIONS_DAYS_UNRESOLVED: continue
#             rows.append([
#                 order.order_submitted.date(),
#                 order.id,
#                 order.dealership.name,
#                 order.customer.get_full_name() if order.customer else '(STOCK)',
#                 day_elapsed,
#                 ordercount[order]
#             ])

#         print(rows[1:5])
#         return rows

#     def get_file_name(self):
#         print('get_file_name')
#         return 'Orders requiring selections'

#     def get_complete_file_name(self):
#         return '{0} - {1}'.format(self.get_file_name(),
#                                      timezone.localtime(timezone.now()).strftime(settings.FORMAT_DATE_ONEWORD))


#     def get(self, request):
#         print('hi')
#         return self.write_csv()

class ColorSelectionSheetView(ExportCSVMixin, PermissionRequiredMixin, View):
    permission_required = 'reports.export_colorsheet'

    def get_headers(self, table=None):
        # print('get_headers')
        headers = [
            'Date',
            'Order',
            'Dealership',
            'Customer',
            'Day since order placed',
            'Number of selections still to be made',
        ]

        print(headers)
        return headers

    def get_rows(self, table=None):
        # print('get_rows')

        orderskus = OrderSKU \
        .objects \
        .filter(sku__public_description__icontains='to be selected') \
        .select_related('sku',).prefetch_related('order','order__dealership','order__customer',) 

        # .values_list('order_id','order__order_submitted','sku__public_description','order__dealership__name','order__customer__first_name','order__customer__last_name')

        # print('orderskus')
        # print(orderskus)

        # for i in range(10):
        # print(orderskus[1])

        ordercount = collections.defaultdict(int)
        # print('ordercount')
        # print(ordercount)

        # for osku in orderskus:
        #     print('osku')
        #     print(osku)
        #     if osku.public_description.lower().find('to be selected'):
        #         print('osku.public_description')
        #         print(osku.public_description)
        #         ordercount[osku.order] += 1
        for osku in orderskus:
        #     # print(osku)
            # print(osku.order_id)
            ordercount[osku.order_id] += 1

        # print(ordercount[1])

        rows = []
        for item in orderskus:
            # print('item.order.order_submitted')
            # print(item.order.order_submitted)
            if not item.order.order_submitted:
                continue

            day_elapsed = int((timezone.now() - item.order.order_submitted).total_seconds()/SECONDS_PER_DAY)
            if day_elapsed < SELECTIONS_DAYS_UNRESOLVED: continue
            rows.append([
                item.order.order_submitted.date(),
                item.order.id,
                item.order.dealership.name,
                item.order.customer.get_full_name() if item.order.customer else '(STOCK)',
                day_elapsed,
                ordercount[item.order_id]
            ])

        # print(rows[1:5])
        return rows

    def get_file_name(self):
        # print('get_file_name')
        return 'Orders requiring selections as of'

    def get_complete_file_name(self):
        return '{0} {1}'.format(self.get_file_name(),
                                     datetime.now().date().strftime("%d-%m-%Y"))


    def get(self, request):
        # print('hi')
        return self.write_csv()


if __name__ == "__main__":
    import doctest
    doctest.testmod()
