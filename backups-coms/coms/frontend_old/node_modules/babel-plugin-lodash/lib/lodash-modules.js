'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveModule;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _lodash = require('lodash');

var _module = require('module');

var _module2 = _interopRequireDefault(_module);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getDirectories(srcPath) {
  // Slow synchronous version of https://github.com/megawac/lodash-modularize/blob/master/src/lodashModules.js.
  // Using the paths lodash-cli provides is not an option as they may change version to version =(
  return ['.'].concat(_fs2.default.readdirSync(srcPath)).filter(function (filePath) {
    return _fs2.default.statSync(_path2.default.join(srcPath, filePath)).isDirectory();
  });
}

var lodashPath = _path2.default.dirname(_module2.default._resolveFilename('lodash', (0, _lodash.assign)(new _module2.default(), {
  'paths': _module2.default._nodeModulePaths(process.cwd())
})));

var categoryMap = (0, _lodash.transform)(getDirectories(lodashPath), function (result, category) {
  result[category] = _fs2.default.readdirSync(_path2.default.join(lodashPath, category)).filter(function (name) {
    return _path2.default.extname(name) == '.js';
  }).map(function (name) {
    return _path2.default.basename(name, '.js');
  });
}, {});

function resolveModule(name, base) {
  var category = void 0;

  if (base) {
    category = categoryMap[base].indexOf(name) > -1 && base;
  } else {
    category = (0, _lodash.findKey)(categoryMap, function (funcs) {
      return funcs.indexOf(name) > -1;
    });
  }
  if (category) {
    return _path2.default.join('lodash', category, name);
  }
  throw new Error(['lodash method ' + name + ' was not in known modules.', 'Please report bugs to https://github.com/lodash/babel-plugin-lodash/issues.'].join('\n'));
}